#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 27, 2019 07:44:08 PM IST  platform: Windows NT

import sys
import cv2 as cv
import PIL.Image,PIL.ImageTk
import numpy as np

from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showinfo
from tkinter.colorchooser import askcolor
from tkinter.filedialog import askdirectory

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import PictionPhotoEditor_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Piction (root)
    PictionPhotoEditor_support.init(root, top)
    root.mainloop()

w = None
def create_Piction(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Piction (w)
    PictionPhotoEditor_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Piction():
    global w
    w.destroy()
    w = None

class Piction:

    features = ["Monochrome","Negative","Blur","Custom Color Filter","Sepia","Edge Detection","Sharpen","Sketch","Draw Freehand", "Crop", "Blend","Contrast & Brightness","RGB to BGR","Pick Color","Rotate","Resize","Add Text","Draw Circle","Draw Rectangle","Picture-in-Picture","Create Background","Draw Line","Square Fit"]
    #               0           1           2           3               4           5               6       7       8               9       10          11                 12              13          14      15           16          17              18              19                  20                21            22


    welcome_message = "Start Editing right away! Select one of the options from the list and look here for more options!"
    current_mode = -1
    image = None

    draw_stack=[]
    undo_stack=[]
    undo_stack_pointer = -1
    mouseClicked = False
    crop_x1 = 0
    crop_x2 = 0
    crop_y1 = 0
    crop_y2 = 0
    crop_percentage = 100
    draw_size=5
    height = 0
    width = 0
    channels = 0
    extension=''
    color = ((255,255,255), "#ffffff")
    mouse_x=0
    mouse_y=0

    rectangle = 0
    font11 = "-family {Segoe UI} -size 9 -weight normal -slant " \
             "roman -underline 0 -overstrike 0"

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Eras Bold ITC} -size 15 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        font13 = "TkDefaultFont"
        font17 = "TkDefaultFont"
        font9 = "-family {Comic Sans MS} -size 18 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"

        self.top = top
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x705+1+-30")
        top.title("Piction Photo Editor")
        top.configure(background="#8a8b8c")
        top.configure(highlightbackground="#666666")
        top.configure(highlightcolor="#6b6b6b")

        self.feature_container = tk.Frame(top)
        self.feature_container.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=0.187)
        self.feature_container.configure(relief='groove')
        self.feature_container.configure(borderwidth="2")
        self.feature_container.configure(relief='groove')
        self.feature_container.configure(background="#3a3630")
        self.feature_container.configure(highlightbackground="#848484")
        self.feature_container.configure(highlightcolor="#092e11")
        self.feature_container.configure(width=255)

        self.main_text = ttk.Label(self.feature_container)
        self.main_text.place(relx=0.039, rely=0.014, height=39, width=236)
        self.main_text.configure(background="#3a3630")
        self.main_text.configure(foreground="#ffffff")
        self.main_text.configure(font=font9)
        self.main_text.configure(relief='flat')
        self.main_text.configure(text='''Start Editing''')

        self.feature_list = tk.Listbox(self.feature_container)
        self.feature_list.place(relx=0.078, rely=0.071, relheight=0.811
                , relwidth=0.839)
        self.feature_list.configure(background="#3a3630")
        self.feature_list.configure(disabledforeground="#a3a3a3")
        self.feature_list.configure(font=font17)
        self.feature_list.configure(foreground="#fcff9e")
        self.feature_list.configure(highlightbackground="#3a3630")
        self.feature_list.configure(highlightcolor="black")
        self.feature_list.configure(selectbackground="#c4c4c4")
        self.feature_list.configure(selectforeground="black")
        self.feature_list.configure(width=214)
        self.feature_list.bind('<<ListboxSelect>>', self.list_clicked)

        i=0
        for feature in self.features:
            self.feature_list.insert(i, feature)
            i = i+1


        self.open_button = ttk.Button(self.feature_container)
        self.open_button.place(relx=0.118, rely=0.95, height=25, width=86)
        self.open_button.configure(takefocus="")
        self.open_button.configure(text='''Open''')
        self.open_button.configure(command = self.open_file)

        self.save_button = ttk.Button(self.feature_container)
        self.save_button.place(relx=0.549, rely=0.95, height=25, width=86)
        self.save_button.configure(takefocus="")
        self.save_button.configure(text='''Save''')
        self.save_button.configure(command = self.save)

        self.undo_button = ttk.Button(self.feature_container)
        self.undo_button.place(relx=0.118, rely=0.894, height=25, width=86)
        self.undo_button.configure(takefocus="")
        self.undo_button.configure(text='''Undo''')
        self.undo_button.configure(command = self.undo)

        self.redo_button = ttk.Button(self.feature_container)
        self.redo_button.place(relx=0.549, rely=0.894, height=25, width=86)
        self.redo_button.configure(takefocus="")
        self.redo_button.configure(text='''Redo''')
        self.redo_button.configure(command = self.redo)

        self.right_pane = tk.Frame(top)
        self.right_pane.place(relx=0.813, rely=0.0, relheight=1.0, relwidth=0.187)
        self.right_pane.configure(relief='groove')
        self.right_pane.configure(borderwidth="2")
        self.right_pane.configure(relief='groove')
        self.right_pane.configure(background="#3a3630")
        self.right_pane.configure(highlightbackground="#515151")
        self.right_pane.configure(highlightcolor="black")
        self.right_pane.configure(width=255)

        self.feature_name = ttk.Label(self.right_pane)
        self.feature_name.place(relx=0.078, rely=0.028, height=39, width=216)
        self.feature_name.configure(background="#3a3630")
        self.feature_name.configure(foreground="#ffffff")
        self.feature_name.configure(font=font10)
        self.feature_name.configure(relief='flat')
        self.feature_name.configure(text='''Edit''')

        self.description = tk.Text(self.right_pane)
        self.description.place(relx=0.078, rely=0.085, relheight=0.275
                , relwidth=0.839)
        self.description.configure(background="#3a3630")
        self.description.configure(borderwidth="2")
        self.description.configure(cursor="arrow")
        self.description.configure(font=font13)
        self.description.configure(foreground="#ffffff")
        self.description.configure(highlightbackground="#d9d9d9")
        self.description.configure(highlightcolor="black")
        self.description.configure(insertbackground="black")
        self.description.configure(selectbackground="#c4c4c4")
        self.description.configure(selectforeground="black")
        self.description.configure(width=214)
        self.description.configure(wrap='word')
        self.description.insert(tk.INSERT, self.welcome_message)

        self.apply_button = ttk.Button(self.right_pane)
        self.apply_button.place(relx=0.118, rely=0.922, height=35, width=196)
        self.apply_button.configure(takefocus="")
        self.apply_button.configure(text='''Apply''')
        self.apply_button.configure(command = self.apply_button_clicked)


        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)




    def set_up_entries(self, *args, amount=0):

        if amount==3:
            self.set_entry1(args[0])
            self.set_entry2(args[1])
            self.set_entry3(args[2])

        elif amount==1:
            self.set_entry1(args[0])

        elif amount==2:
            self.set_entry1(args[0])
            self.set_entry2(args[1])


        elif amount==4:
            self.set_entry1(args[0])
            self.set_entry2(args[1])
            self.set_entry3(args[2])
            self.set_entry4(args[3])

        elif amount==5:
            self.set_entry1(args[0])
            self.set_entry2(args[1])
            self.set_entry3(args[2])
            self.set_entry4(args[3])
            self.set_entry5(args[4])


    def set_entry1(self, msg):
        self.edit_label1 = ttk.Label(self.right_pane)
        self.edit_label1.place(relx=0.078, rely=0.397, height=19, width=86)
        self.edit_label1.configure(background="#3a3630")
        self.edit_label1.configure(foreground="#ffffff")
        self.edit_label1.configure(font="TkDefaultFont")
        self.edit_label1.configure(relief='flat')
        self.edit_label1.configure(text=msg)

        self.edit_entry1 = tk.Entry(self.right_pane)
        self.edit_entry1.place(relx=0.471, rely=0.397, height=20, relwidth=0.449)
        self.edit_entry1.configure(background="white")
        self.edit_entry1.configure(disabledforeground="#a3a3a3")
        self.edit_entry1.configure(font="TkFixedFont")
        self.edit_entry1.configure(foreground="#000000")
        self.edit_entry1.configure(highlightbackground="#d9d9d9")
        self.edit_entry1.configure(highlightcolor="black")
        self.edit_entry1.configure(insertbackground="black")
        self.edit_entry1.configure(selectbackground="#c4c4c4")
        self.edit_entry1.configure(selectforeground="black")

    def set_entry2(self, msg):
        self.edit_label2 = ttk.Label(self.right_pane)
        self.edit_label2.place(relx=0.078, rely=0.454, height=19, width=86)
        self.edit_label2.configure(background="#3a3630")
        self.edit_label2.configure(foreground="#ffffff")
        self.edit_label2.configure(font="TkDefaultFont")
        self.edit_label2.configure(relief='flat')
        self.edit_label2.configure(text=msg)

        self.edit_entry2 = tk.Entry(self.right_pane)
        self.edit_entry2.place(relx=0.471, rely=0.454, height=20, width=114)
        self.edit_entry2.configure(background="white")
        self.edit_entry2.configure(disabledforeground="#a3a3a3")
        self.edit_entry2.configure(font="TkFixedFont")
        self.edit_entry2.configure(foreground="#000000")
        self.edit_entry2.configure(highlightbackground="#d9d9d9")
        self.edit_entry2.configure(highlightcolor="black")
        self.edit_entry2.configure(insertbackground="black")
        self.edit_entry2.configure(selectbackground="#c4c4c4")
        self.edit_entry2.configure(selectforeground="black")

    def set_entry3(self, msg):
        self.edit_label3 = ttk.Label(self.right_pane)
        self.edit_label3.place(relx=0.078, rely=0.511, height=19, width=86)
        self.edit_label3.configure(background="#3a3630")
        self.edit_label3.configure(foreground="#ffffff")
        self.edit_label3.configure(font="TkDefaultFont")
        self.edit_label3.configure(relief='flat')
        self.edit_label3.configure(text=msg)

        self.edit_entry3 = tk.Entry(self.right_pane)
        self.edit_entry3.place(relx=0.471, rely=0.511, height=20, width=114)
        self.edit_entry3.configure(background="white")
        self.edit_entry3.configure(disabledforeground="#a3a3a3")
        self.edit_entry3.configure(font="TkFixedFont")
        self.edit_entry3.configure(foreground="#000000")
        self.edit_entry3.configure(highlightbackground="#d9d9d9")
        self.edit_entry3.configure(highlightcolor="black")
        self.edit_entry3.configure(insertbackground="black")
        self.edit_entry3.configure(selectbackground="#c4c4c4")
        self.edit_entry3.configure(selectforeground="black")

    def set_entry4(self, msg):
        self.edit_label4 = ttk.Label(self.right_pane)
        self.edit_label4.place(relx=0.078, rely=0.567, height=19, width=86)
        self.edit_label4.configure(background="#3a3630")
        self.edit_label4.configure(foreground="#ffffff")
        self.edit_label4.configure(font="TkDefaultFont")
        self.edit_label4.configure(relief='flat')
        self.edit_label4.configure(text=msg)

        self.edit_entry4 = tk.Entry(self.right_pane)
        self.edit_entry4.place(relx=0.471, rely=0.567, height=20, width=114)
        self.edit_entry4.configure(background="white")
        self.edit_entry4.configure(disabledforeground="#a3a3a3")
        self.edit_entry4.configure(font="TkFixedFont")
        self.edit_entry4.configure(foreground="#000000")
        self.edit_entry4.configure(highlightbackground="#d9d9d9")
        self.edit_entry4.configure(highlightcolor="black")
        self.edit_entry4.configure(insertbackground="black")
        self.edit_entry4.configure(selectbackground="#c4c4c4")
        self.edit_entry4.configure(selectforeground="black")


    def set_entry5(self,msg):
        self.edit_label5 = ttk.Label(self.right_pane)
        self.edit_label5.place(relx=0.078, rely=0.624, height=19, width=86)
        self.edit_label5.configure(background="#3a3630")
        self.edit_label5.configure(foreground="#ffffff")
        self.edit_label5.configure(font="TkDefaultFont")
        self.edit_label5.configure(relief='flat')
        self.edit_label5.configure(text=msg)

        self.edit_entry5 = tk.Entry(self.right_pane)
        self.edit_entry5.place(relx=0.471, rely=0.624, height=20, width=114)
        self.edit_entry5.configure(background="white")
        self.edit_entry5.configure(disabledforeground="#a3a3a3")
        self.edit_entry5.configure(font="TkFixedFont")
        self.edit_entry5.configure(foreground="#000000")
        self.edit_entry5.configure(highlightbackground="#d9d9d9")
        self.edit_entry5.configure(highlightcolor="black")
        self.edit_entry5.configure(insertbackground="black")
        self.edit_entry5.configure(selectbackground="#c4c4c4")
        self.edit_entry5.configure(selectforeground="black")


    def open_file(self):
        image_path = askopenfilename()

        try:
            self.image = cv.imread(image_path)
            self.height, self.width, self.channels = self.image.shape
            #print(self.image)

            try:
                self.image_area.destroy()
                self.image_area = tk.Canvas(self.top, highlightthickness = 0)
            except:
                self.image_area = tk.Canvas(self.top, highlightthickness = 0)

            print("Original Height  =",self.height, "Original width =", self.width)
            self.set_image(self.image)
            self.image_area.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
            #print("Done")
            self.push()

        except AttributeError:
           print("Attribute Error")

        splitted = image_path.split("/")

        name = splitted[-1]
        self.image_path_route = "/".join(splitted[:-1]) + "/"
        #print(self.image_path_route)

        name_splitted = name.split(".")


        self.image_name = name_splitted[0]
        self.extension = "."+name_splitted[1]

        print(name_splitted[0], name_splitted[1])
        print(self.extension)

        #print(self.image_name, self.extension)
        #print(image_path)


    def crop_image(self,image):
        try:
            height, width, n = image.shape
        except ValueError:
            height, width = image.shape

        if height > 680 or width > 855:
            l = [i for i in range(98, 0, -2)]

            if height > 680 or width > 855:
                # l = [i for i in range(90, 0, -10)]
                l = [i for i in range(98, 0, -2)]
                image_croped=0

                for percentage in l:
                    h=height*percentage/100
                    w=width*percentage/100

                    if h < 680 and w < 855:
                        image_croped = cv.resize(image, (int(w), int(h)), interpolation=cv.INTER_AREA)
                        self.crop_percentage = percentage
                        print("Height =",h,"Width =",w)
                        print("Percent =",self.crop_percentage)
                        break

            image = image_croped
        else:
            self.crop_percentage=100
        return image


    def monochrome_setup(self):
        msg = "Convert the Image into Grayscale!"
        self.set_description(msg)

    def monochrome_apply(self):
        self.image = cv.cvtColor(self.image, cv.COLOR_BGRA2GRAY)
        self.image = cv.cvtColor(self.image, cv.COLOR_GRAY2BGR)
        self.set_image(self.image)

    def blur_setup(self):
        msg = "Enter a custom magnitude below and see a Blurred image proportional to the magnitude!"
        self.set_up_entries("Magnitude", amount=1)
        self.set_description(msg)


    def blur_apply(self):
        magnitude = 3

        try:
            magnitude = int(self.edit_entry1.get())
        except ValueError:
            print("Enter a Value!")

        self.image_blur = cv.blur(self.image,(magnitude,magnitude))
        self.set_image(self.image_blur)
        self.image = self.image_blur
        #print("Done")

    def negative_setup(self):
        msg = "Get a Color Negative image of the current image!"
        self.set_description(msg)

    def negative_apply(self):
        self.image = cv.bitwise_not(self.image)
        self.set_image(self.image)
        #print("Done")

    def sepia_setup(self):
        msg = "Sepia is a Reddish Brown Color, Sepia filter filters the image to give a classic reddish finish to the image\n Below are values\n R=112, G=66, B=20"
        self.set_description(msg)

    def verify_alpha(self,frame):
        try:
            frame.shape[3]
        except IndexError:
            return cv.cvtColor(frame, cv.COLOR_BGR2BGRA)


    def sepia_apply(self):
        intensity = 0.4
        frame = self.verify_alpha(self.image)
        height, width, channels = frame.shape
        blue = 20
        green = 66
        red = 112
        sepia_bgra = (blue, green, red, 1)
        overlay = np.full((height, width, 4), sepia_bgra, dtype='uint8')
        cv.addWeighted(overlay, intensity, frame, 1.0, 0, frame)
        #self.print_image_properties(frame)
        frame = cv.cvtColor(frame, cv.COLOR_BGRA2BGR)
        self.image = frame
        self.set_image(frame)

    def custom_color_filter_setup(self):
        msg = "Manupulate which color you want more! Hit the below entries with custom RGB values and Intensity Value to get desired composition in your image!"

        self.set_up_scales([[0,255,"Red"],[0,255,"Green"],[0,255,"Blue"],[0,100,"Intensity"]], amount=4)
        try:
            self.image = cv.cvtColor(self.image, cv.COLOR_GRAY2BGRA)
        except:
            print("hehehe")
        self.image_copy = self.image.copy()
        self.set_description(msg)


    def custom_color_filter_apply(self):
        intensity = float(self.scale_4.get())
        intensity = intensity/100
        frame = self.verify_alpha(self.image_copy)
        height, width, channels = frame.shape

        red = int(self.scale_1.get())
        green = int(self.scale_2.get())
        blue = int(self.scale_3.get())
        sepia_bgra = (blue, green, red, 1)

        overlay = np.full((height, width, 4), sepia_bgra, dtype='uint8')
        cv.addWeighted(overlay, intensity, frame, 1.0, 0, frame)
        frame = cv.cvtColor(frame, cv.COLOR_BGRA2BGR)
        self.image = frame
        self.set_image(frame)


    def canny_edge_setup(self):
        msg = "Detect the edges along the picture to get a sketch like view!"


        self.set_description(msg)


    def canny_edge_apply(self):
        gray = cv.cvtColor(self.image,cv.COLOR_BGR2GRAY)
        edges = cv.Canny(gray,70,200)
        self.image = cv.cvtColor(edges, cv.COLOR_GRAY2BGR)
        self.set_image(self.image)

    def sharpen_setup(self):
        msg = "Sharpen the image and maybe give a drawing-like look to your image!"

        #self.set_up_entries(amount = 1)
        self.set_description(msg)

    def sharpen_apply(self):
       # magnitude = float(self.edit_entry1.get())
        image = self.image
        #kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])

        kernel = np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
        image = cv.filter2D(image, -1, kernel)
        self.set_image(image)


    def sketch_setup(self):
        msg = "Sketch is obtained as a combination of Canny Edge Detection and Negative Filter, get a sketch of the current image by hitting the apply button!"
        self.set_description(msg)

    def sketch_apply(self):
        self.canny_edge_apply()
        self.negative_apply()


    def draw_setup(self):
        msg = "Highlight different regions of image by Drawing on the image with the click and drag of Mouse!"

        self.setup_extra_button("Color")
        #self.set_up_entries("Size","Color", amount = 2)
        self.set_up_entries("Size", amount=1)
        self.set_description(msg)
        self.image_area.bind('<Motion>', self.draw_mouse_moving)
        self.image_area.bind('<Button-1>', self.draw_mouse_clicked)
        self.image_area.bind('<ButtonRelease-1>', self.draw_mouse_released)

    def draw_apply(self, event):
        try:
            self.draw_size = int(self.edit_entry1.get())
            self.draw_size = int(self.draw_size*100/self.crop_percentage)
        except:
            print("Wait")
        color = self.edit_entry2.get()
        color = self.color

        if (self.mouseClicked and self.current_mode==8):
            x = event.x
            y = event.y
            self.image_area.create_oval(x - self.draw_size, y - self.draw_size, x + self.draw_size, y + self.draw_size, fill=color, outline=color)
            #cv.circle(self.iself.draw_sizee, (int(x*100/self.crop_percentage),int(y*100/self.crop_percentage)), mag, (255,0,0), thickness=-1)
            #self.set_image(self.image)

    def draw_mouse_clicked(self, event):
        print("Clicked at :", event.x, event.y)
        self.draw_size_canvas = int(self.edit_entry1.get())
        self.draw_size = int(self.draw_size_canvas * 100 / self.crop_percentage)
        x = int(event.x*100/self.crop_percentage)
        y = int (event.y*100/self.crop_percentage)
        self.draw_stack.clear()
        self.draw_stack.append((x, y))
        self.mouseClicked = True

    def draw_mouse_moving(self, event):
        x = int(event.x*100/self.crop_percentage)
        y = int (event.y*100/self.crop_percentage)


        if (self.mouseClicked and self.current_mode == 8):
            self.draw_stack.append((x, y))
            x = event.x
            y = event.y
            self.image_area.create_oval(x - self.draw_size_canvas, y - self.draw_size_canvas, x + self.draw_size_canvas, y + self.draw_size_canvas,
                                        fill = self.color[1], outline = self.color[1])

    def draw_mouse_released(self, event):
        print("Released at:", event.x, event.y)
        self.mouseClicked = False

        image = self.image.copy()

        for point in self.draw_stack:
            image = cv.circle(image, point, self.draw_size, tuple(reversed(self.color[0])) , thickness = -1)

        self.image = image
        self.apply_button_clicked()
        self.set_image(image)
        #cv.imshow("self.image",self.image)
        self.draw_stack.clear()



    def crop_setup(self):
        msg = "Crop the image by dragging and selecting the region on the image!"


        self.set_description(msg)
        self.image_area.bind('<Motion>', self.crop_mouse_moving)
        self.image_area.bind('<Button-1>', self.crop_mouse_clicked)
        self.image_area.bind('<ButtonRelease-1>', self.crop_mouse_released)

    def crop_mouse_clicked(self, event):
        print("Clicked at :", event.x, event.y)
        self.crop_x1 = event.x
        self.crop_y1 = event.y
        self.mouseClicked = True

    def crop_mouse_released(self, event):
        print("Released at:", event.x, event.y)
        self.crop_x2 = event.x
        self.crop_y2 = event.y
        self.mouseClicked = False
        print(self.crop_percentage)

        image = self.image[int(self.crop_y1*100/(self.crop_percentage)) : int(self.crop_y2*100/(self.crop_percentage)), int(self.crop_x1*100/(self.crop_percentage)) : int(self.crop_x2*100/(self.crop_percentage))]
        self.image = image



    def crop_mouse_moving(self, event):
        x = event.x
        y = event.y
        if(self.mouseClicked):
            self.image_area.delete(self.rectangle)
            self.rectangle = self.image_area.create_rectangle(self.crop_x1, self.crop_y1, x, y, fill = None)
            #print(self.crop_percentage)

    def crop_apply(self):
        self.set_image(self.image)
        h,w,n = self.image.shape
        self.height = h
        self.width = w
        print("Height =", self.height, "Width =", self.width)

    def blend_setup(self):
        msg = "Blend two images Img1 and Img2 according to custom weight and get a mixed image of both the images as output!\n\nWorks best when both images are of same Aspect Ratios!"
        self.set_description(msg)
        self.setup_extra_button("Open Image")
        self.set_up_scales([[0,100,"Im 1"],[0,100,"Im 2"]], amount= 2)
        self.image_copy = self.image.copy()

    def blend_apply(self):
       try:
           self.opened_image = cv.resize(self.opened_image, (self.width, self.height), interpolation=cv.INTER_AREA)
           weight1 = self.scale_1.get()
           weight2 = self.scale_2.get()
           weight1 = weight1/100
           weight2 = weight2/100
           img =   cv.addWeighted(self.image_copy, weight1, self.opened_image, weight2, 0)
           self.set_image(img)
           self.image= img
       except:
           showinfo("Error", "Please Select Image 2")

       # weight1 = self.scale_1.get()
       # weight2 = self.scale_2.get()
       # weight1 = weight1/100
       # weight2 = weight2/100
       # img =   cv.addWeighted(self.image_copy, weight1, self.opened_image, weight2, 0)
       # self.set_image(img)
       # self.image= img


    def contrast_setup(self):
        msg = "Change the contrast of the Image by setting a custom value in the below scale!\n\nImg increses the brightness of image\nCon increses the contrast of image!"
        self.set_description(msg)
        self.set_up_scales([[0,100,"Bri"],[0,100,"Con"]], amount=2)
        self.image_copy = self.image.copy()

    def contrast_apply(self):
        alpha = self.scale_1.get()
        alpha = np.interp(alpha,[0,100],[1,2.5])
        beta = self.scale_2.get()
        beta = np.interp(beta, [0,100],[0,200])
        beta=0-beta

        img = cv.addWeighted(self.image_copy, alpha, np.zeros(self.image_copy.shape, self.image_copy.dtype), 0 , beta)
        self.set_image(img)
        self.image = img


    def rgb2bgr_setup(self):
        msg = "This interprets the image's Blue channel as Red and Red channel as Blue\nRGB is interpreted as BGR"
        self.set_description(msg)

    def rgb2bgr_apply(self):
        self.image = cv.cvtColor(self.image,cv.COLOR_BGR2RGB)
        self.set_image(self.image)

    def pick_color_setup(self):
        msg = "Click anywhere on the image and and get a image with that particular color highlighted and other all in Black and White"
        self.set_description(msg)
        #self.set_up_scales([[0, 150, "Range"]], amount=1)
        self.set_up_scales([[0, 255, "Red"],[0, 255, "Green"],[0, 255, "Blue"]], amount=3)
        self.image_area.bind('<Button-1>', self.pick_clicked)
        self.image_copy=self.image.copy()

    def pick_clicked(self, event):
        self.mouse_x = event.x
        self.mouse_y = event.y
        self.mouseClicked = True

        print("Clicked at:", self.mouse_x,",",self.mouse_y)
        self.image_copy = self.image

    def pick_color_apply(self):
        if self.mouseClicked:
            rgb_values = self.image[int(self.mouse_x*100/self.crop_percentage)][int(self.mouse_y*100/self.crop_percentage)]
        else:
            rgb_values = self.image_copy[int(self.mouse_x * 100 / self.crop_percentage)][
                int(self.mouse_y * 100 / self.crop_percentage)]

        self.mouseClicked = False

        index_max = np.argmax(rgb_values)
        print(index_max)

        print(self.mouse_x*100/self.crop_percentage, self.mouse_y*100/self.crop_percentage)

        gray = cv.cvtColor(self.image_copy, cv.COLOR_BGR2GRAY)
        gray = cv.cvtColor(gray, cv.COLOR_GRAY2BGR)

        print("Max At",rgb_values)

        # lower = np.array([i-75 if np.where(rgb_values == i)==index_max else i-50 for i in rgb_values])
        # upper = np.array([i+75 if np.where(rgb_values == i)==index_max else i+50 for i in rgb_values])

        range = int(self.scale_1.get())

        # lower = np.array([i-range for i in rgb_values])
        # upper = np.array([i+range for i in rgb_values])

        lower = [0,0,0]
        upper = [0,0,0]

        lower[0] = rgb_values[0] - int(self.scale_1.get())
        lower[1] = rgb_values[1] - int(self.scale_1.get())
        lower[2] = rgb_values[2] - int(self.scale_1.get())

        upper[0] = rgb_values[0] + int(self.scale_1.get())
        upper[1] = rgb_values[1] + int(self.scale_1.get())
        upper[2] = rgb_values[2] + int(self.scale_1.get())

        lower = np.array(lower)
        upper = np.array(upper)

        print(lower,upper)

        mask = cv.inRange(self.image_copy, lower, upper)
        mask_inv = cv.bitwise_not(mask)

        img = cv.bitwise_and(self.image_copy, self.image_copy, mask= mask)

        img2 = cv.bitwise_and(gray, gray, mask= mask_inv)
        img = cv.add(img,img2)
        self.image = img

        self.set_image(img)

    def rotate_setup(self):
        msg = "Rotate the image by 90 degrees each time you click the Apply Button!"
        self.set_description(msg)

    def rotate_apply(self):
        # M = cv.getRotationMatrix2D((self.width/2,self.height/2),90,1)
        # img = cv.warpAffine(self.image,M,(self.width,self.height))

        img = cv.rotate(self.image, cv.ROTATE_90_COUNTERCLOCKWISE)
        temp = self.height
        self.height = self.width
        self.width = temp
        self.image = img
        self.set_image(img)

    def resize_setup(self):
        msg = "Resize the image to required resolution..."
        self.set_description(msg)
        self.set_up_entries("Height","Width","Percentage",amount=3)

    def resize_apply(self):
        try:
            h = int(self.edit_entry1.get())
            w = int(self.edit_entry2.get())
            img = cv.resize(self.image,(w,h),interpolation=cv.INTER_AREA)
        except:
            p = int(self.edit_entry3.get())
            img = cv.resize(self.image, (int(self.width*p/100),int( self.height*p/100)), interpolation=cv.INTER_AREA)

        self.image = img
        self.set_image(img)

    def add_text_setup(self):
        msg = "Add Text to your images and create memes and lots of stuff!\n\nEnter Font Code in font Section\nEnter any number between 1 to 7"
        self.set_description(msg)
        self.set_up_entries("Text","Size","Thick","Font", amount=4)
        self.setup_extra_button("Color")
        self.image_area.bind('<Button-1>', self.text_get_point)
        self.option = tk.StringVar()

        try:
            self.options.clear()
        except:
            print("Not Yet Bitch")
        self.options = ["Font1","Font2","Font 3", "Font 4","Font 5","Font 6","Font 7"]
        self.option.set(self.options[0])
        self.optionMenu = tk.OptionMenu(self.right_pane,self.option,self.options[0],*self.options)
        self.optionMenu.place(relx=0.471, rely=0.567, height=20, width=114)

    def text_get_point(self,event):
        x = int(event.x*100/self.crop_percentage)
        y = int(event.y*100/self.crop_percentage)

        self.image_copy = self.image.copy()
        text = self.edit_entry1.get()
        size = float(self.edit_entry2.get())
        thickness = int(self.edit_entry3.get())
        try:
            #f = int(self.edit_entry4.get())
            f = self.options.index(self.option.get())

            if f==0:
                font = cv.FONT_HERSHEY_COMPLEX
            elif f==1:
                font = cv.FONT_HERSHEY_SCRIPT_COMPLEX
            elif f==2:
                font = cv.FONT_HERSHEY_SIMPLEX
            elif f == 3:
                font = cv.FONT_HERSHEY_DUPLEX
            elif f == 4:
                font = cv.FONT_HERSHEY_COMPLEX_SMALL
            elif f == 5:
                font = cv.FONT_HERSHEY_TRIPLEX
            elif f == 6:
                font = cv.FONT_HERSHEY_PLAIN
            else:
                font = cv.FONT_HERSHEY_COMPLEX
        except:
            font = cv.FONT_HERSHEY_COMPLEX

        img = cv.putText(img=self.image_copy,org=(x,y),text=text, fontFace=font, fontScale=size, color= tuple(reversed(self.color[0])), thickness=thickness)
        self.image_copy = img
        self.set_image(img)

    def add_text_apply(self):
        #This just places the Text at (0,0) and that text needs to be dragged to custom position!
        text = self.edit_entry1.get()
        self.image = self.image_copy


    def draw_circle_setup(self):
        msg = "Highlight people or things in the image in the traditional way! Draw a circle around it!"
        self.set_description(msg)
        self.set_up_scales([[1,20,"Thick"]], amount=1)
        self.image_copy = self.image.copy()
        self.image_area.bind("<Button-1>",self.draw_circle_clicked)
        self.image_area.bind("<Motion>",self.draw_circle_moving)
        self.image_area.bind("<ButtonRelease-1>",self.draw_circle_released)
        self.setup_extra_button("Color")


    def draw_circle_clicked(self, event):
        self.mouseClicked=True
        self.crop_x1 = event.x
        self.crop_y1 = event.y
        self.circle = 0

    def draw_circle_moving(self, event):
        x = event.x
        y = event.y
        thickness = self.scale_1.get()
        if self.mouseClicked:
            self.image_area.delete(self.circle)
            self.circle = self.image_area.create_oval(self.crop_x1,self.crop_y1,x,y, outline = self.color[1], width = thickness)


    def draw_circle_released(self, event):
        self.image_copy = self.image.copy()
        x = event.x*100/self.crop_percentage
        y = event.y*100/self.crop_percentage
        self.crop_x1 = self.crop_x1*100/self.crop_percentage
        self.crop_y1 = self.crop_y1*100/self.crop_percentage
        self.mouseClicked = False
        thickness = self.scale_1.get()

        axisX = int((x - self.crop_x1)/2)
        axisY = int((y - self.crop_y1)/2)
        centre = (int((x+self.crop_x1)/2),int((y+self.crop_y1)/2))

        cv.ellipse(self.image_copy,centre,(axisX,axisY),0,0,360,tuple(reversed(self.color[0])),thickness=thickness)
        self.image = self.image_copy
        self.set_image(self.image_copy)
        self.apply_button_clicked()

    def draw_circle_apply(self):
        self.image = self.image_copy

    def draw_rectangle_setup(self):
        msg = "Draw Rectangles on your image using your Mouse!"
        self.set_description(msg)
        self.set_up_scales([[1, 20, "Thick"]], amount=1)
        self.image_copy = self.image.copy()
        self.image_area.bind("<Button-1>", self.draw_rectangle_clicked)
        self.image_area.bind("<Motion>", self.draw_rectangle_moving)
        self.image_area.bind("<ButtonRelease-1>", self.draw_rectangle_released)
        self.setup_extra_button("Color")

    def draw_rectangle_clicked(self,event):
        self.mouseClicked = True
        self.crop_x1 = event.x
        self.crop_y1 = event.y

    def draw_rectangle_moving(self, event):
        x = event.x
        y = event.y
        thickness = self.scale_1.get()
        if self.mouseClicked:
            self.image_area.delete(self.rectangle)
            self.rectangle = self.image_area.create_rectangle(self.crop_x1, self.crop_y1, x, y, outline = self.color[1], width = thickness)

    def draw_rectangle_released(self, event):
        self.image_copy = self.image.copy()
        x = int(event.x * 100 / self.crop_percentage)
        y = int(event.y * 100 / self.crop_percentage)
        self.crop_x1 = int(self.crop_x1 * 100 / self.crop_percentage)
        self.crop_y1 = int(self.crop_y1 * 100 / self.crop_percentage)
        self.mouseClicked = False
        thickness = self.scale_1.get()

        point1 = (self.crop_x1, self.crop_y1)
        point2 = (x,y)

        cv.rectangle(self.image_copy, point1, point2, tuple(reversed(self.color[0])), thickness= thickness)
        self.image = self.image_copy
        self.set_image(self.image_copy)
        self.apply_button_clicked()

    def draw_rectangle_apply(self):
        self.image = self.image_copy


    def PiP_setup(self):
        msg = "Open another picture by clicking open file button below and select the region where you want that image!!"
        self.set_description(msg)
        self.setup_extra_button("Open Image")
        self.image_area.bind("<Button-1>", self.PiP_clicked)
        self.image_area.bind("<Motion>", self.PiP_moving)
        self.image_area.bind("<ButtonRelease-1>", self.PiP_released)
        self.image_copy = self.image.copy()
        #cv.imshow("img", self.image_copy)

    def PiP_clicked(self, event):
        self.mouseClicked = True
        self.crop_x1 = event.x
        self.crop_y1 = event.y

    def PiP_moving(self, event):
        x = event.x
        y = event.y
        if self.mouseClicked:
            self.image_area.delete(self.rectangle)
            self.rectangle = self.image_area.create_rectangle(self.crop_x1, self.crop_y1, x, y)

    def PiP_released(self, event):
        self.image_copy = self.image.copy()
        self.mouseClicked = False

        self.crop_x1 = int(self.crop_x1*100/self.crop_percentage)
        self.crop_y1 = int(self.crop_y1*100/self.crop_percentage)

        x = int(event.x*100/self.crop_percentage)
        y = int(event.y*100/self.crop_percentage)

        sizeX = x - self.crop_x1
        sizeY = y - self.crop_y1

        print("SizeX =",sizeX, "SizeY =",sizeY)

        img = cv.resize(self.opened_image, (sizeX,sizeY), interpolation=cv.INTER_AREA)

        print("Shape ",img.shape)

        self.image_copy[self.crop_y1:y , self.crop_x1:x] = img
        self.set_image(self.image_copy)
        self.apply_button_clicked()

    def PiP_apply(self):
        self.image = self.image_copy

    def create_background_setup(self):
        msg = "Create a background of resolution 2000 x 2000 and work with other tools in the App to crete a Masterpeice!"
        self.set_description(msg)
        self.set_up_scales([[0,255,"Red"],[0,255,"Green"],[0,255,"Blue"]], amount=3)

    def create_background_apply(self):
        red = self.scale_1.get()
        green = self.scale_2.get()
        blue = self.scale_3.get()

        bgr = (blue, green, red)

        background = np.full((2000, 2000, 3),bgr , dtype='uint8')
        self.height = 2000
        self.width = 2000
        self.set_image(background)
        self.image = background

    def draw_line_setup(self):
        msg = "Conect one point to another by a straight line!\nSelect the thickness and color below and get started"
        self.set_description(msg)
        self.set_up_scales([[1,10,"Thick"]],amount=1)
        self.setup_extra_button("Color")
        self.image_area.bind("<Button-1>",self.draw_line_clicked)
        self.image_area.bind("<Motion>",self.draw_line_moving)
        self.image_area.bind("<ButtonRelease-1>",self.draw_line_released)

    def draw_line_clicked(self, event):
        self.mouseClicked = True
        self.crop_x1 = event.x
        self.crop_y1 = event.y
        self.line = 0

    def draw_line_moving(self, event):
        if self.mouseClicked:
            self.image_area.delete(self.line)
            thickness = self.scale_1.get()
            self.line = self.image_area.create_line(self.crop_x1, self.crop_y1, event.x, event.y, width = thickness, fill = self.color[1])

    def draw_line_released(self, event):
        self.mouseClicked =False
        self.crop_x1 = int(self.crop_x1 * 100 / self.crop_percentage)
        self.crop_y1 = int(self.crop_y1 * 100 / self.crop_percentage)
        self.image_copy = self.image.copy()
        x = int(event.x * 100 / self.crop_percentage)
        y = int(event.y * 100 / self.crop_percentage)

        thickness = self.scale_1.get()
        self.image_copy = cv.line(self.image_copy, (self.crop_x1, self.crop_y1),(x,y),color=tuple(reversed(self.color[0])), thickness= thickness)
        self.apply_button_clicked()
        self.set_image(self.image_copy)

    def draw_line_apply(self):
        self.image = self.image_copy

    def square_fit_setup(self):
        msg = "Need to change WhatsApp DP or Instagram DP but your picture ain't square?\n\nWe got you covered! Just select the Background Color and hit Apply!"
        self.set_description(msg)
        self.setup_extra_button("Color")
        self.image_copy = self.image.copy()


    def square_fit_apply(self):
        if self.height>self.width :

            bgr = tuple(reversed(self.color[0]))
            background = np.full((self.height, self.height, 3), bgr, dtype='uint8')

            background[0:self.height, int((self.height-self.width)/2):int((self.height+self.width)/2)] = self.image_copy

            self.image = background
            self.set_image(self.image)

        elif self.width> self.height:

            bgr = tuple(reversed(self.color[0]))
            background = np.full((self.width, self.width, 3), bgr, dtype="uint8")

            background[int((self.width-self.height)/2) : int((self.width+self.height)/2), 0:self.width] = self.image_copy
            self.image = background
            self.set_image(self.image)

        else:
            showinfo("Notice", "Image already Square!")


    def undo(self):

        print("Length of List =", len(self.undo_stack))
        try:
            self.image = self.pop()
            print("Pointer =", self.undo_stack_pointer)
            self.set_image(self.image)
        except IndexError:
            print("Stack Empty")

    def redo(self):
        #print("Pointer =", self.undo_stack_pointer)
        try:
            self.undo_stack[self.undo_stack_pointer+1]
            #print("here")
            self.undo_stack_pointer = self.undo_stack_pointer + 1
            image = self.undo_stack[self.undo_stack_pointer]
            self.image = image
            self.set_image(self.image)
        except:
            image = self.undo_stack[self.undo_stack_pointer]
            self.image = image
            self.set_image(self.image)


    def list_clicked(self,event):
        w = event.widget
        index = int(w.curselection()[0])
        self.destroy_scales()
        self.destroy_entries()
        self.destroy_extra_button()
        self.destroy_option_nemu()
        self.feature_name.configure(text=self.features[index])

        if(index==0):
            self.monochrome_setup()
            self.current_mode=0
        elif(index==2):
            self.blur_setup()
            self.current_mode=2
        elif(index==1):
            self.negative_setup()
            self.current_mode=1
        elif(index==4):
            self.sepia_setup()
            self.current_mode=4
        elif(index==3):
            self.custom_color_filter_setup()
            self.current_mode=3
        elif(index == 5):
            self.canny_edge_setup()
            self.current_mode = 5
        elif(index==6):
            self.sharpen_setup()
            self.current_mode = 6
        elif (index == 7):
            self.sketch_setup()
            self.current_mode = 7
        elif(index == 8):
            self.draw_setup()
            self.current_mode=8
        elif (index == 9):
            self.crop_setup()
            self.current_mode = 9
        elif(index==10):
            self.blend_setup()
            self.current_mode = 10
        elif(index==11):
            self.contrast_setup()
            self.current_mode=11
        elif (index == 12):
            self.rgb2bgr_setup()
            self.current_mode = 12
        elif (index == 13):
            self.pick_color_setup()
            self.current_mode = 13
        elif(index == 14):
            self.rotate_setup()
            self.current_mode = 14
        elif index ==15:
            self.resize_setup()
            self.current_mode = 15
        elif index == 16:
            self.add_text_setup()
            self.current_mode = 16
        elif index == 17:
            self.draw_circle_setup()
            self.current_mode = 17
        elif index == 18:
            self.draw_rectangle_setup()
            self.current_mode=18
        elif index == 19:
            self.PiP_setup()
            self.current_mode=19
        elif index == 20:
            self.create_background_setup()
            self.current_mode=20
        elif index == 21:
            self.draw_line_setup()
            self.current_mode =21
        elif index == 22:
            self.square_fit_setup()
            self.current_mode = 22

    def apply_button_clicked(self):
        del self.undo_stack[self.undo_stack_pointer+1:]

        #print("Length of List =",len(self.undo_stack))
        if (self.current_mode == 2):
            self.blur_apply()
        elif (self.current_mode == 1):
            self.negative_apply()
        elif (self.current_mode == 4):
            self.sepia_apply()
        elif (self.current_mode == 3):
            self.custom_color_filter_apply()
        elif(self.current_mode==5):
            self.canny_edge_apply()
        elif(self.current_mode==0):
            self.monochrome_apply()
        elif(self.current_mode==6):
            self.sharpen_apply()
        elif(self.current_mode==7):
            self.sketch_apply()
        elif(self.current_mode==9):
            self.crop_apply()
        elif(self.current_mode==10):
            self.blend_apply()
        elif(self.current_mode==11):
            self.contrast_apply()
        elif (self.current_mode == 12):
            self.rgb2bgr_apply()
        elif (self.current_mode == 13):
            self.pick_color_apply()
        elif (self.current_mode == 14 ):
            self.rotate_apply()
        elif self.current_mode == 15:
            self.resize_apply()
        elif self.current_mode == 16:
            self.add_text_apply()
        elif self.current_mode == 17:
            self.draw_circle_apply()
        elif self.current_mode == 18:
            self.draw_rectangle_apply()
        elif self.current_mode == 19:
            self.PiP_apply()
        elif self.current_mode == 20:
            self.create_background_apply()
        elif self.current_mode == 21:
            self.draw_line_apply()
        elif self.current_mode == 22:
            self.square_fit_apply()

        self.push()
        #self.print_image_properties(self.image)


    def save(self):
        try:
            print(self.extension)
            save_file_name = self.image_path_route + self.image_name + "_Piction" + self.extension
            print(save_file_name)
            #Troughout the editing process, self.image remains in BGR format as cv.imread reads it in BGR, it is converted to RGB each time set_image funtion is called
            #But while saving the image, cv.imwrite converts BGR to RGB so no need to convert the image again!
            cv.imwrite(save_file_name, self.image)
            showinfo("Notification","Image Saved!")
        except:
            directory = askdirectory()
            path = directory+"/Piction.jpg"
            cv.imwrite(path, self.image)


    def mouse_clicked(self, event):
        print("Clicked at :", event.x, event.y)
        self.mouseClicked = True

    def mouse_released(self, event):
        print("Released at:", event.x, event.y)
        self.mouseClicked = False


    def destroy_entries(self):
        try:
            self.edit_label1.destroy()
            self.edit_entry1.destroy()
        except AttributeError:
            print("Dodged")

        try:
            self.edit_label2.destroy()
            self.edit_entry2.destroy()
        except AttributeError:
            print("Dodged")

        try:
            self.edit_label3.destroy()
            self.edit_entry3.destroy()
        except AttributeError:
            print("Dodged")

        try:
            self.edit_label4.destroy()
            self.edit_entry4.destroy()
        except AttributeError:
            print("Dodged")

        try:
            self.edit_label5.destroy()
            self.edit_entry5.destroy()
        except AttributeError:
            print("Dodged")

        try:
            self.image_area.unbind('<Motion>')
            self.image_area.unbind('<Button-1>')
            self.image_area.unbind('<ButtonRelease-1>')
            print("unbinded")
        except:
            print("HEhEH")



    def set_image(self, image):
        image = cv.cvtColor(image, cv.COLOR_BGR2RGB)
        image = self.crop_image(image)
        height, width, channels = image.shape
        try:
            self.image_area.configure(height = height, width = width)
            self.photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(image))
            self.image_area.create_image(0, 0, image=self.photo, anchor=tk.NW)
        except:
            self.image_area = tk.Canvas(self.top, highlightthickness=0)
            self.image_area.configure(height = height, width = width)
            self.photo = PIL.ImageTk.PhotoImage(image=PIL.Image.fromarray(image))
            self.image_area.create_image(0, 0, image=self.photo, anchor=tk.NW)
            self.image_area.place(relx = 0.5, rely = 0.5, anchor=tk.CENTER)

    def set_description(self, msg):
        self.description.delete(1.0, tk.END)
        self.description.insert(tk.INSERT, msg)

    def print_image_properties(self, image):
        try:
            h, w, n = image.shape
            #print("height =", h, "width =", w, "Channels =",n)
        except ValueError:
            h, w = image.shape
            #print("height =",h,"width =",w)

        #print(image[100,100])


    def push(self):
        self.undo_stack_pointer = self.undo_stack_pointer + 1
        print("Value =", self.undo_stack_pointer)
        #print("Pointer =",self.undo_stack_pointer)
        self.undo_stack.append(self.image)
        #cv.imshow("initial", self.undo_stack[1])

    def pop(self):

        if(self.undo_stack_pointer-1>=0):
            self.undo_stack_pointer = self.undo_stack_pointer -1;
            image = self.undo_stack[self.undo_stack_pointer]
            print("Value =", self.undo_stack_pointer)
            return image
        else:
            return self.image



    def set_up_scales(self, args, amount=0):

        if amount==4:
            self.set_scale1(args[0])
            self.set_scale2(args[1])
            self.set_scale3(args[2])
            self.set_scale4(args[3])

        elif amount==2:
            self.set_scale1(args[0])
            self.set_scale2(args[1])



        elif amount==3:
            self.set_scale1(args[0])
            self.set_scale2(args[1])
            self.set_scale3(args[2])

        elif amount==1:
            self.set_scale1(args[0])



    def set_scale1(self, args):
        self.scale_1 = tk.Scale(self.right_pane, from_= args[0], to= args[1])
        self.scale_1.place(relx=0.314, rely=0.411, relwidth=0.635, relheight=0.0
                           , height=42, bordermode='ignore')
        self.scale_1.configure(activebackground="#ececec")
        self.scale_1.configure(background="#3a3630")
        self.scale_1.configure(font=self.font11)
        self.scale_1.configure(foreground="#ffffff")
        self.scale_1.configure(highlightbackground="#3a3630")
        self.scale_1.configure(highlightcolor="#3a3630")
        self.scale_1.configure(length="156")
        self.scale_1.configure(orient="horizontal")
        self.scale_1.configure(troughcolor="#d8d8d8")

        self.scale_label1 = tk.Label(self.right_pane)
        self.scale_label1.place(relx=0.078, rely=0.44, height=21, width=26)
        self.scale_label1.configure(activebackground="#f9f9f9")
        self.scale_label1.configure(activeforeground="black")
        self.scale_label1.configure(background="#3a3630")
        self.scale_label1.configure(disabledforeground="#a3a3a3")
        self.scale_label1.configure(foreground="#ffffff")
        self.scale_label1.configure(highlightbackground="#d9d9d9")
        self.scale_label1.configure(highlightcolor="black")
        self.scale_label1.configure(text= args[2])



    def set_scale2(self, args):
        self.scale_2 = tk.Scale(self.right_pane, from_= args[0], to= args[1])
        self.scale_2.place(relx=0.314, rely=0.482, relwidth=0.631, relheight=0.0
                           , height=42, bordermode='ignore')
        self.scale_2.configure(activebackground="#ececec")
        self.scale_2.configure(background="#3a3630")
        self.scale_2.configure(font=self.font11)
        self.scale_2.configure(foreground="#ffffff")
        self.scale_2.configure(highlightbackground="#3a3630")
        self.scale_2.configure(highlightcolor="#3a3630")
        self.scale_2.configure(orient="horizontal")
        self.scale_2.configure(troughcolor="#d8d8d8")

        self.scale_label2 = tk.Label(self.right_pane)
        self.scale_label2.place(relx=0.078, rely=0.511, height=21, width=37)
        self.scale_label2.configure(activebackground="#f9f9f9")
        self.scale_label2.configure(activeforeground="black")
        self.scale_label2.configure(background="#3a3630")
        self.scale_label2.configure(disabledforeground="#a3a3a3")
        self.scale_label2.configure(foreground="#ffffff")
        self.scale_label2.configure(highlightbackground="#d9d9d9")
        self.scale_label2.configure(highlightcolor="black")
        self.scale_label2.configure(text= args[2])

    def set_scale3(self, args):
        self.scale_3 = tk.Scale(self.right_pane, from_= args[0], to= args[1])
        self.scale_3.place(relx=0.314, rely=0.553, relwidth=0.631, relheight=0.0
                           , height=42, bordermode='ignore')
        self.scale_3.configure(activebackground="#ececec")
        self.scale_3.configure(background="#3a3630")
        self.scale_3.configure(font=self.font11)
        self.scale_3.configure(foreground="#ffffff")
        self.scale_3.configure(highlightbackground="#3a3630")
        self.scale_3.configure(highlightcolor="#3a3630")
        self.scale_3.configure(orient="horizontal")
        self.scale_3.configure(troughcolor="#d8d8d8")

        self.scale_label3 = tk.Label(self.right_pane)
        self.scale_label3.place(relx=0.078, rely=0.582, height=21, width=29)
        self.scale_label3.configure(activebackground="#f9f9f9")
        self.scale_label3.configure(activeforeground="black")
        self.scale_label3.configure(background="#3a3630")
        self.scale_label3.configure(disabledforeground="#a3a3a3")
        self.scale_label3.configure(foreground="#ffffff")
        self.scale_label3.configure(highlightbackground="#d9d9d9")
        self.scale_label3.configure(highlightcolor="black")
        self.scale_label3.configure(text= args[2])


    def set_scale4(self, args):

        self.scale_4 = tk.Scale(self.right_pane, from_= args[0], to= args[1])
        self.scale_4.place(relx=0.314, rely=0.624, relwidth=0.631, relheight=0.0
                           , height=42, bordermode='ignore')
        self.scale_4.configure(activebackground="#ececec")
        self.scale_4.configure(background="#3a3630")
        self.scale_4.configure(font=self.font11)
        self.scale_4.configure(foreground="#ffffff")
        self.scale_4.configure(highlightbackground="#3a3630")
        self.scale_4.configure(highlightcolor="#3a3630")
        self.scale_4.configure(orient="horizontal")
        self.scale_4.configure(troughcolor="#d8d8d8")

        self.scale_label4 = tk.Label(self.right_pane)
        self.scale_label4.place(relx=0.078, rely=0.652, height=21, width=51)
        self.scale_label4.configure(activebackground="#f9f9f9")
        self.scale_label4.configure(activeforeground="black")
        self.scale_label4.configure(background="#3a3630")
        self.scale_label4.configure(disabledforeground="#a3a3a3")
        self.scale_label4.configure(foreground="#ffffff")
        self.scale_label4.configure(highlightbackground="#d9d9d9")
        self.scale_label4.configure(highlightcolor="black")
        self.scale_label4.configure(text= args[2])



    def destroy_scales(self):
        try:
            self.scale_1.destroy()
            self.scale_label1.destroy()
        except:
            print("Panda1")

        try:
            self.scale_2.destroy()
            self.scale_label2.destroy()
        except:
            print("Panda2")

        try:
            self.scale_3.destroy()
            self.scale_label3.destroy()
        except:
            print("Panda3")

        try:
            self.scale_4.destroy()
            self.scale_label4.destroy()
        except:
            print("Panda4")

    def setup_extra_button(self, msg):
        self.extra_button = tk.Button(self.right_pane, text = msg, command = self.extra_button_clicked)
        self.extra_button.place(relx = 0.235, rely = 0.865, height =25, width= 136)

    def extra_button_clicked(self):
        if self.current_mode == 10 or self.current_mode == 19:
            path = askopenfilename()
            self.opened_image = cv.imread(path)


        elif self.current_mode == 8 or self.current_mode == 16 or self.current_mode == 17 or self.current_mode  == 18 or self.current_mode == 21 or self.current_mode == 22:
            self.color = askcolor()
            #self.color = self.color[0]
            print(self.color)


    def destroy_extra_button(self):
        try:
            self.extra_button.destroy()
        except:
            print("No button yet")

    def destroy_option_nemu(self):
        try:
            self.optionMenu.destroy()
        except:
            print("No button yet")



if __name__ == '__main__':
    vp_start_gui()
